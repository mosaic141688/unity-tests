"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const immutable_1 = require("immutable");
const bool_1 = require("../../../src/values/bool");
const number_1 = require("../../../src/values/number");
const record_1 = require("../../../src/values/record");
const any_1 = require("../../../src/values/any");
const string_1 = require("../../../src/values/string");
const empty_1 = require("../../../src/values/empty");
const list_1 = require("../../../src/values/list");
ava_1.test('toValue() creates value from plain js', t => {
    t.truthy(any_1.toValue(true).equals(new bool_1.default({ content: true })));
    t.truthy(any_1.toValue(1).equals(new number_1.default({ content: 1 })));
    t.truthy(any_1.toValue('test').equals(new string_1.default({ content: 'test' })));
    t.truthy(any_1.toValue(null).equals(new empty_1.default({ content: undefined })));
    t.truthy(any_1.toValue(undefined).equals(new empty_1.default({ content: undefined })));
    t.truthy(any_1.toValue([1, 2, 3])
        .equals(new list_1.default({
        type: '[number]',
        content: immutable_1.List([
            new number_1.default({ content: 1 }),
            new number_1.default({ content: 2 }),
            new number_1.default({ content: 3 }),
        ])
    })));
    t.truthy(any_1.toValue([
        { name: 'Sam', age: 17 },
        { name: 'Jack', age: 14 },
        { name: 'Tim', age: 23 },
    ])
        .equals(new list_1.default({
        type: '[{name: string, age: number}]',
        content: immutable_1.List([
            any_1.toValue({ name: 'Sam', age: 17 }),
            any_1.toValue({ name: 'Jack', age: 14 }),
            any_1.toValue({ name: 'Tim', age: 23 }),
        ])
    })));
    t.truthy(any_1.toValue({ name: 'Sam', age: 17 })
        .equals(new record_1.default({
        type: '{name: string, age: number}',
        content: immutable_1.Map({
            name: new string_1.default({ content: 'Sam' }),
            age: new number_1.default({ content: 17 }),
        })
    })));
    t.truthy(any_1.toValue({
        name: 'Sam',
        scores: [1, 2, 3]
    })
        .equals(new record_1.default({
        type: '{name: string, scores: [number]}',
        content: immutable_1.Map({
            name: new string_1.default({ content: 'Sam' }),
            scores: any_1.toValue([1, 2, 3])
        })
    })));
});
ava_1.test('toValue() throws on incompatible inner types', t => {
    t.throws(() => {
        any_1.toValue([1, '2', 3]);
    }, Error);
    t.throws(() => {
        any_1.toValue({
            name: 'Sam',
            scores: [1, '2', 3]
        });
    }, Error);
    t.throws(() => {
        any_1.toValue([
            { name: 'Sam', age: 17 },
            { name: 'Tim', age: '14' },
            { name: 'Tom', age: 23 },
        ]);
    }, Error);
    t.throws(() => {
        any_1.toValue([
            { name: 'Sam', age: 17 },
            { nick: 'Batman', age: '14' },
            { name: 'Tom', age: 23 },
        ]);
    }, Error);
});
ava_1.test('resolvePath() returns value by path', t => {
    const n1 = new number_1.default({ content: 1 });
    const n2 = new number_1.default({ content: 2 });
    const n3 = new number_1.default({ content: 3 });
    const content = immutable_1.Map({
        'n1': new record_1.default({
            content: immutable_1.Map({
                'n1': n1,
                'n2': n2,
                'n3': n3,
            })
        }),
        'n2': n2,
        'n3': n3,
    });
    const value = new record_1.default({ content: content });
    t.truthy(any_1.resolvePath(n1, []).equals(n1));
    t.truthy(any_1.resolvePath(n2, ['']).equals(n2));
    t.truthy(any_1.resolvePath(value, ['n1', 'n3']).equals(n3));
});
ava_1.test('resolvePath() throws on invalid path', t => {
    const n1 = new number_1.default({ content: 1 });
    const n2 = new number_1.default({ content: 2 });
    const n3 = new number_1.default({ content: 3 });
    const content = immutable_1.Map({
        'n1': new record_1.default({
            content: immutable_1.Map({
                'n1': n1,
                'n2': n2,
                'n3': n3,
            })
        }),
        'n2': n2,
        'n3': n3,
    });
    const value = new record_1.default({ content: content });
    t.throws(() => {
        t.truthy(any_1.resolvePath(value, ['n1', 'nope']).equals(n3));
        t.truthy(any_1.resolvePath(n1, ['n1', 'nope']).equals(n3));
    }, Error);
});
//# sourceMappingURL=any_test.js.map