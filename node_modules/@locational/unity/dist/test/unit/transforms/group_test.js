"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const any_1 = require("../../../src/values/any");
const group_1 = require("../../../src/transforms/group");
ava_1.test('reduceTransform()', t => {
    // Throws when options does not have 'expression'
    t.throws(() => {
        group_1.default('[{name: string}]', {});
    });
    // Throws when value type does not match input type
    t.throws(() => {
        group_1.default('number', { expression: { value: 1 } });
    });
    const section = group_1.default('[{name: string, age: number}]', {
        expression: {
            path: [
                { dep: '$element' },
                { value: 'age' }
            ]
        }
    });
    t.is(section.input_type, '[{name: string, age: number}]');
    // TODO: Implement expression type inferrence
    t.is(section.output_type, '{b}');
    t.deepEqual(section.deps, []);
    console.log(JSON.stringify(section.transform(any_1.toValue([
        { name: 'Jim', age: 17 },
        { name: 'Tim', age: 21 },
        { name: 'Sam', age: 17 }
    ]), {}).toJS()));
    // t.truthy(
    //     section.transform(toValue([
    //         { name: 'Jim', age: 17 },
    //         { name: 'Tim', age: 21 },
    //         { name: 'Sam', age: 17 }
    //     ]), {}).equals(toValue({
    //         '17': [{ name: 'Jim', age: 17 }, { name: 'Sam', age: 17 }],
    //         '21': [{ name: 'Tim', age: 21 }]
    //     }))
    // )
});
//# sourceMappingURL=group_test.js.map