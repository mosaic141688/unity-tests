"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const commands_1 = require("../../../src/expression/commands");
const any_1 = require("../../../src/values/any");
ava_1.test('identity() returns its argument', t => {
    t.truthy(commands_1.identity(any_1.toValue(1)).equals(any_1.toValue(1)));
});
ava_1.test('value() converts JS value to Unity value', t => {
    t.truthy(commands_1.value(1).equals(any_1.toValue(1)));
});
ava_1.test('gt([a, b] checks if a > b)', t => {
    t.truthy(commands_1.gt([
        { value: 5 },
        { value: 1 }
    ]).equals(any_1.toValue(true)));
    t.truthy(commands_1.gt([
        { value: 1 },
        { value: 5 }
    ]).equals(any_1.toValue(false)));
    t.throws(() => { commands_1.gt(1); });
    t.throws(() => { commands_1.gt([2, 1]); });
    t.throws(() => { commands_1.gt({ value: 1 }); });
    t.throws(() => { commands_1.gt([{ value: 1 }, { value: 2 }, { value: 3 }]); });
});
ava_1.test('lt([a, b] checks if a < b)', t => {
    t.truthy(commands_1.lt([
        { value: 1 },
        { value: 5 }
    ]).equals(any_1.toValue(true)));
    t.truthy(commands_1.lt([
        { value: 5 },
        { value: 1 }
    ]).equals(any_1.toValue(false)));
    t.throws(() => { commands_1.lt(1); });
    t.throws(() => { commands_1.lt([2, 1]); });
    t.throws(() => { commands_1.lt({ value: 1 }); });
    t.throws(() => { commands_1.lt([{ value: 1 }, { value: 2 }, { value: 3 }]); });
});
ava_1.test('eq([a, b] checks if a == b)', t => {
    t.truthy(commands_1.eq([
        { value: 1 },
        { value: 1 }
    ]).equals(any_1.toValue(true)));
    t.truthy(commands_1.eq([
        { value: 5 },
        { value: 1 }
    ]).equals(any_1.toValue(false)));
    t.throws(() => { commands_1.eq(1); });
    t.throws(() => { commands_1.eq([2, 1]); });
    t.throws(() => { commands_1.eq({ value: 1 }); });
    t.throws(() => { commands_1.eq([{ value: 1 }, { value: 2 }, { value: 3 }]); });
});
ava_1.test('neq([a, b] checks if a != b)', t => {
    t.truthy(commands_1.neq([
        { value: 5 },
        { value: 1 }
    ]).equals(any_1.toValue(true)));
    t.truthy(commands_1.neq([
        { value: 1 },
        { value: 1 }
    ]).equals(any_1.toValue(false)));
    t.throws(() => { commands_1.neq(1); });
    t.throws(() => { commands_1.neq([2, 1]); });
    t.throws(() => { commands_1.neq({ value: 1 }); });
    t.throws(() => { commands_1.neq([{ value: 1 }, { value: 2 }, { value: 3 }]); });
});
ava_1.test('plus[a, b] returns a + b', t => {
    t.truthy(commands_1.plus([
        { value: 1 },
        { value: 2 }
    ]).equals(any_1.toValue(3)));
});
ava_1.test('path[a, b] returns value by path b in value a', t => [
    t.truthy(commands_1.path([
        { value: [{ name: 'Jim', age: 17 }] },
        { value: '0.name' }
    ]).equals(any_1.toValue('Jim')))
]);
//# sourceMappingURL=commands_test.js.map