"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const expectations_1 = require("../../../src/expression/expectations");
const any_1 = require("../../../src/values/any");
ava_1.test('expectExpression()', t => {
    t.deepEqual(expectations_1.expectExpression({ value: 1 }), ['value', 1]);
    t.deepEqual(expectations_1.expectExpression({
        gt: [
            { value: 5 },
            { value: 1 }
        ]
    }), ['gt', [{ value: 5 }, { value: 1 }]]);
    t.throws(() => {
        expectations_1.expectExpression({});
    });
    t.throws(() => {
        expectations_1.expectExpression({ a: 1, b: 2 });
    });
});
ava_1.test('expectTwo()', t => {
    t.deepEqual(expectations_1.expectTwo([1, 2]), [1, 2]);
    t.deepEqual(expectations_1.expectTwo([{ value: 1 }, { value: 2 }]), [{ value: 1 }, { value: 2 }]);
    t.throws(() => {
        expectations_1.expectTwo(1);
    });
    t.throws(() => {
        expectations_1.expectTwo({ value: 1 });
    });
    t.throws(() => {
        expectations_1.expectTwo([{ value: 1 }, { value: 2 }, { value: 3 }]);
    });
});
ava_1.test('expectBasicValue()', t => {
    t.is(expectations_1.expectBasicValue(any_1.toValue(true)), true);
    t.is(expectations_1.expectBasicValue(any_1.toValue(1)), 1);
    t.is(expectations_1.expectBasicValue(any_1.toValue('test')), 'test');
    t.throws(() => { expectations_1.expectBasicValue(true); });
    t.throws(() => { expectations_1.expectBasicValue(1); });
    t.throws(() => { expectations_1.expectBasicValue('test'); });
    t.throws(() => { expectations_1.expectBasicValue([1, 2, 3]); });
    t.throws(() => { expectations_1.expectBasicValue({ a: 1 }); });
});
ava_1.test('expectType()', t => {
    t.is(expectations_1.expectType(any_1.toValue(true), 'bool'), true);
    t.is(expectations_1.expectType(any_1.toValue(1), 'number'), 1);
    t.is(expectations_1.expectType(any_1.toValue("test"), 'string'), "test");
    t.throws(() => expectations_1.expectType(any_1.toValue(true), 'number'));
    t.throws(() => expectations_1.expectType(any_1.toValue(1), 'string'));
});
//# sourceMappingURL=expectations_test.js.map