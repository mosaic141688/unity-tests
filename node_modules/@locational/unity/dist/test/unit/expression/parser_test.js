"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const parser_1 = require("../../../src/expression/parser");
const any_1 = require("../../../src/values/any");
const store_1 = require("../../../src/store");
ava_1.test('deps() extracts dependencies from expression', t => {
    t.deepEqual(parser_1.deps({ dep: '@num' }), ['@num']);
    t.deepEqual(parser_1.deps({
        gt: [
            { dep: '@num' },
            { max: [{ dep: '$element' }, { dep: '@min_age' }] }
        ]
    }), ['@num', '@min_age']);
});
ava_1.test('resolve() resolves dependencies in expression from store', t => {
    const store = new store_1.default();
    store.registerValue('num', any_1.toValue(1));
    t.deepEqual(parser_1.resolve_global(store, { dep: '@num' }), { identity: any_1.toValue(1) });
    t.deepEqual(parser_1.resolve_global(store, {
        gt: [
            { dep: '@num' },
            { dep: '$element' }
        ]
    }), {
        gt: [
            { identity: any_1.toValue(1) },
            { dep: '$element' }
        ]
    });
    t.throws(() => { parser_1.resolve_global(store, { dep: 1234 }); });
    t.throws(() => { parser_1.resolve_global(store, { dep: '@no_such_value' }); });
});
ava_1.test('resolve_local() resolves dependencies in expression from local depmap', t => {
    const depmap = {
        '$element': any_1.toValue(1),
        '@num': any_1.toValue(2)
    };
    t.deepEqual(parser_1.resolve_local(depmap, { dep: '@num' }), { identity: any_1.toValue(2) });
    t.deepEqual(parser_1.resolve_local(depmap, {
        gt: [
            { dep: '@num' },
            { dep: '$element' }
        ]
    }), {
        gt: [
            { identity: any_1.toValue(2) },
            { identity: any_1.toValue(1) }
        ]
    });
    t.throws(() => { parser_1.resolve_local(depmap, { dep: 1234 }); });
    t.throws(() => { parser_1.resolve_local(depmap, { dep: '@no_such_value' }); });
});
ava_1.test('evaluate() runs the expression and returns value', t => {
    t.truthy(parser_1.evaluate({
        gt: [
            { value: 10 },
            { value: 5 }
        ]
    }).equals(any_1.toValue(true)));
});
//# sourceMappingURL=parser_test.js.map