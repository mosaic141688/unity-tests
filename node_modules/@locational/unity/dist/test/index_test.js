"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const index_1 = require("../src/index");
ava_1.test('Complex example', t => {
    const store = new index_1.Store();
    store.registerValue('people', index_1.value([
        { name: 'Jim', age: 17 },
        { name: 'Tim', age: 21 },
        { name: 'Sam', age: 14 },
        { name: 'Tom', age: 32 },
        { name: 'Kim', age: 21 },
    ]));
    store.registerConfig('grownups', {
        input: { dep: '@people' },
        pipeline: [
            {
                type: 'where',
                options: {
                    expression: {
                        gt: [
                            {
                                path: [
                                    { dep: '$element' },
                                    { value: 'age' }
                                ]
                            },
                            { value: 18 }
                        ]
                    }
                }
            }
        ]
    });
    store.registerConfig('grownups_names', {
        input: { dep: '@people' },
        pipeline: [
            {
                type: 'where',
                options: {
                    expression: {
                        gt: [
                            {
                                path: [
                                    { dep: '$element' },
                                    { value: 'age' }
                                ]
                            },
                            { value: 18 }
                        ]
                    }
                }
            },
            {
                type: 'map',
                options: {
                    expression: {
                        path: [
                            { dep: '$element' },
                            { value: 'name' }
                        ]
                    }
                }
            }
        ]
    });
    store.registerConfig('grownups_names_sorted', {
        input: { dep: '#grownups_names' },
        pipeline: [
            {
                type: 'sort',
                options: {}
            }
        ]
    });
    store.registerConfig('grownups_ages_sum', {
        input: { dep: '#grownups' },
        pipeline: [
            {
                type: 'reduce',
                options: {
                    acc: { value: 0 },
                    expression: {
                        plus: [
                            { dep: '$acc' },
                            {
                                path: [
                                    { dep: '$element' },
                                    { value: 'age' }
                                ]
                            }
                        ]
                    }
                }
            }
        ]
    });
    store.run();
    const grownups = store.lookupUnit('grownups');
    const names = store.lookupUnit('grownups_names');
    const names_sorted = store.lookupUnit('grownups_names_sorted');
    const ages_sum = store.lookupUnit('grownups_ages_sum');
    t.truthy(grownups.run().equals(index_1.value([
        { name: 'Tim', age: 21 },
        { name: 'Tom', age: 32 },
        { name: 'Kim', age: 21 }
    ])));
    t.truthy(names.run().equals(index_1.value([
        'Tim',
        'Tom',
        'Kim'
    ])));
    t.truthy(names_sorted.run().equals(index_1.value([
        'Kim',
        'Tim',
        'Tom'
    ])));
    t.truthy(ages_sum.run().equals(index_1.value(74)));
});
//# sourceMappingURL=index_test.js.map