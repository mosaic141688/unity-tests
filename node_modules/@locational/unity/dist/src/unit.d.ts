import Store from './store';
import { TAnyValue } from './values/any';
import { EventEmitter } from 'eventemitter3';
import { TExpression, TDepMap, TDepList } from './expression/parser';
import { ITransformConfig } from './transforms/any';
import { TPipeline } from './pipeline';
export declare type TUnitDeps = {
    [key: string]: any;
};
export interface IUnitConfig {
    input: TExpression;
    pipeline: ITransformConfig[];
}
export declare function extractUnitConfigDeps(config: IUnitConfig): TDepList;
export default class Unit extends EventEmitter {
    readonly store: Store;
    readonly name: string;
    readonly input_expression: TExpression;
    input: TAnyValue;
    readonly output_type: string;
    output: TAnyValue;
    readonly pipeline_config: ITransformConfig[];
    readonly pipeline: TPipeline;
    readonly deps: TDepList;
    dirty: Boolean;
    constructor(store: Store, name: string, config: IUnitConfig, deps: TDepList);
    depMap(): TDepMap;
    run(): TAnyValue;
}
