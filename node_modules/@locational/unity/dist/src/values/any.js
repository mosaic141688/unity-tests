"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ramda_1 = require("ramda");
const empty_1 = require("./empty");
const number_1 = require("./number");
const string_1 = require("./string");
const list_1 = require("./list");
const record_1 = require("./record");
const bool_1 = require("./bool");
function toValue(value) {
    switch (typeof value) {
        case 'undefined':
            return new empty_1.default();
        case 'boolean':
            return new bool_1.default({ content: value });
        case 'number':
            return new number_1.default({ content: value });
        case 'string':
            return new string_1.default({ content: value });
        case 'object':
            if (value === null) {
                return new empty_1.default();
            }
            if (Array.isArray(value)) {
                return ramda_1.reduce((acc, v) => {
                    const content_value = toValue(v);
                    const content = acc.content.push(content_value);
                    if (acc.type !== '[]' && acc.type !== `[${content_value.type}]`) {
                        throw Error(`List with type ${acc.type} can not hold values of type ${content_value.type}`);
                    }
                    acc = acc.set('type', `[${content_value.type}]`);
                    acc = acc.set('content', content);
                    return acc;
                }, new list_1.default(), value);
            }
            return ramda_1.reduce((acc, key) => {
                const content_value = toValue(value[key]);
                const content = acc.content.set(key, content_value);
                let type = '';
                if (acc.type === '{}') {
                    type = `{${key}: ${content_value.type}}`;
                }
                else {
                    type = [acc.type.slice(0, acc.type.length - 1), `, ${key}: ${content_value.type}}`].join('');
                }
                acc = acc.set('type', type);
                acc = acc.set('content', content);
                return acc;
            }, new record_1.default(), ramda_1.keys(value));
        default:
            throw Error(`Can not create value from ${JSON.stringify(value)}`);
    }
}
exports.toValue = toValue;
function resolvePath(value, path) {
    if (value instanceof list_1.default) {
        const segment = Number(path.shift());
        const inner_value = value.content.get(segment);
        if (inner_value) {
            return resolvePath(inner_value, path);
        }
        else {
            throw Error(`Expected value by path ${path}, [${segment}]`);
        }
    }
    if (value instanceof record_1.default) {
        const segment = path.shift() || '';
        const inner_value = value.content.get(segment);
        if (inner_value) {
            return resolvePath(inner_value, path);
        }
        else {
            throw Error(`Expected to find value by path ${path}, [${segment}]`);
        }
    }
    if (path.length < 1 || path[0] === '') {
        return value;
    }
    else {
        throw Error(`Expected value to be Collection by path ${path}`);
    }
}
exports.resolvePath = resolvePath;
//# sourceMappingURL=any.js.map