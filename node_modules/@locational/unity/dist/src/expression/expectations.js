"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ramda_1 = require("ramda");
const type_1 = require("../type");
function expectExpression(expression) {
    const all_keys = ramda_1.keys(expression);
    if (all_keys.length > 1) {
        throw Error(`Expresson ${expression} has more than one command`);
    }
    const command = ramda_1.head(all_keys);
    if (command === undefined) {
        throw Error(`Expresson ${expression} should have at least one command`);
    }
    return [command, expression[command]];
}
exports.expectExpression = expectExpression;
function expectTwo(args) {
    if (!Array.isArray(args)) {
        throw Error(`Expected ${args} to be an array`);
    }
    if (args.length !== 2) {
        throw Error(`Expected ${args} to be an array of two elements`);
    }
    const [a, b] = args;
    return [a, b];
}
exports.expectTwo = expectTwo;
function expectType(args, type) {
    if (typeof args !== 'object' || args.type === undefined || args.content === undefined) {
        throw Error(`Expected ${args} to be a value`);
    }
    if (args.type != type) {
        throw Error(`Expected value ${args} to be of type ${type}`);
    }
    return args.content;
}
exports.expectType = expectType;
function expectBasicValue(args) {
    if (typeof args !== 'object' || args.type === undefined || args.content === undefined) {
        throw Error(`Expected ${args} to be a value`);
    }
    if (!type_1.BASIC_TYPES.includes(args.type)) {
        throw Error(`Expected value ${args} to be of basic type`);
    }
    return args.content;
}
exports.expectBasicValue = expectBasicValue;
//# sourceMappingURL=expectations.js.map