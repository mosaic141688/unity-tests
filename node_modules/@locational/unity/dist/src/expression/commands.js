"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const any_1 = require("../values/any");
const expectations_1 = require("./expectations");
const parser_1 = require("./parser");
// Values
function identity(args) {
    return args;
}
exports.identity = identity;
function value(args) {
    return any_1.toValue(args);
}
exports.value = value;
// Comparison
function gt(args) {
    const [a, b] = expectations_1.expectTwo(args);
    const value_a = parser_1.evaluate(a);
    const value_b = parser_1.evaluate(b);
    const content_a = expectations_1.expectBasicValue(value_a);
    const content_b = expectations_1.expectBasicValue(value_b);
    return any_1.toValue(content_a > content_b);
}
exports.gt = gt;
function lt(args) {
    const [a, b] = expectations_1.expectTwo(args);
    const value_a = parser_1.evaluate(a);
    const value_b = parser_1.evaluate(b);
    const content_a = expectations_1.expectBasicValue(value_a);
    const content_b = expectations_1.expectBasicValue(value_b);
    return any_1.toValue(content_a < content_b);
}
exports.lt = lt;
function eq(args) {
    const [a, b] = expectations_1.expectTwo(args);
    const value_a = parser_1.evaluate(a);
    const value_b = parser_1.evaluate(b);
    return any_1.toValue(value_a.equals(value_b));
}
exports.eq = eq;
function neq(args) {
    const [a, b] = expectations_1.expectTwo(args);
    const value_a = parser_1.evaluate(a);
    const value_b = parser_1.evaluate(b);
    return any_1.toValue(!value_a.equals(value_b));
}
exports.neq = neq;
// Math
function plus(args) {
    const [a, b] = expectations_1.expectTwo(args);
    const value_a = parser_1.evaluate(a);
    const value_b = parser_1.evaluate(b);
    const content_a = expectations_1.expectType(value_a, 'number');
    const content_b = expectations_1.expectType(value_b, 'number');
    return any_1.toValue(content_a + content_b);
}
exports.plus = plus;
// Path
function path(args) {
    const [a, b] = expectations_1.expectTwo(args);
    const value_a = parser_1.evaluate(a);
    const value_b = parser_1.evaluate(b);
    expectations_1.expectType(value_b, 'string');
    const path = value_b.content;
    return any_1.resolvePath(value_a, path.split('.'));
}
exports.path = path;
//# sourceMappingURL=commands.js.map