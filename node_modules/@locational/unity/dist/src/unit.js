"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const eventemitter3_1 = require("eventemitter3");
const ramda_1 = require("ramda");
const parser_1 = require("./expression/parser");
const pipeline_1 = require("./pipeline");
function extractUnitConfigDeps(config) {
    return ramda_1.uniq(parser_1.deps(config.input)
        .concat(pipeline_1.extractPipelineConfigDeps(config.pipeline)));
}
exports.extractUnitConfigDeps = extractUnitConfigDeps;
class Unit extends eventemitter3_1.EventEmitter {
    constructor(store, name, config, deps) {
        super();
        this.dirty = true;
        this.store = store;
        this.name = name;
        this.deps = deps;
        this.input_expression = config.input;
        this.pipeline_config = config.pipeline;
        this.input = parser_1.evaluate(parser_1.resolve_global(store, this.input_expression));
        this.pipeline = pipeline_1.pipeline(this.input.type, this.pipeline_config);
        // Infer output type
        if (this.pipeline.length > 0) {
            this.output_type = this.pipeline[this.pipeline.length - 1].output_type;
        }
        else {
            this.input.type;
        }
    }
    depMap() {
        return ramda_1.reduce((acc, dep) => {
            acc[dep] = this.store.lookup(dep);
            return acc;
        }, {}, this.deps);
    }
    run() {
        if (this.dirty) {
            const depmap = this.depMap();
            this.input = parser_1.evaluate(parser_1.resolve_global(this.store, this.input_expression));
            this.output = ramda_1.reduce((acc, section) => {
                return section.transform(acc, depmap);
            }, this.input, this.pipeline);
            this.dirty = false;
        }
        return this.output;
    }
}
exports.default = Unit;
//# sourceMappingURL=unit.js.map